{"version":3,"sources":["components/AppHeader.jsx","components/common/Row.jsx","components/services/SwapiService.jsx","components/Spinner/Spinner.jsx","components/ErrorIndicator.jsx","components/hoc/withData.jsx","components/ItemList.jsx","components/sw-components/ItemLists.jsx","components/ItemDetails.jsx","components/SwapiServiceContext.jsx","components/sw-components/Details.jsx","components/PeoplePage.jsx","components/PlanetsPage.jsx","components/StarshipsPage.jsx","components/NotFound.jsx","components/RandomPlanet/PlanetView.jsx","components/RandomPlanet/RandomPlanet.jsx","App.js","serviceWorker.js","index.js"],"names":["AppHeader","react_default","a","createElement","className","Link","to","type","data-toggle","data-target","aria-controls","aria-expanded","aria-label","id","NavLink","Row","_ref","left","right","SwapiService","_apiBase","getAllPeople","_callee","res","regenerator_default","wrap","_context","prev","next","_this","getResource","sent","abrupt","results","map","_transformPerson","stop","getPerson","_callee2","person","_context2","concat","getAllPlanets","_callee3","_context3","_transformPlanet","getPlanet","_callee4","planet","_context4","getAllStarships","_callee5","_context5","_transformStarship","getStarship","_callee6","starship","_context6","_extractId","name","population","rotationPeriod","rotation_period","diameter","model","costInCredits","cost_in_credits","length","crew","passengers","cargoCapacity","cargo_capacity","height","mass","eyeColor","eye_color","birthYear","birth_year","gender","url","fetch","this","then","json","catch","err","console","log","data","item","match","Spinner","style","width","ErrorIndicator","src","alt","withData","View","getData","_Component","_temp","_getPrototypeOf2","Object","classCallCheck","_len","arguments","args","Array","_key","possibleConstructorReturn","getPrototypeOf","call","apply","state","loading","error","inherits","createClass","key","value","update","_this2","setState","_this$state","components_Spinner_Spinner","components_ErrorIndicator","assign","props","Component","ItemList","onItemSelected","items","onClick","placeholder","withChildFunction","Wrapped","fn","renderName","_ref2","PersonList","PlanetList","StarshipList","_ref3","Record","field","label","ItemDetails","updateItem","_this$props","itemId","prevProps","imageFolder","React","Children","children","child","cloneElement","createContext","SwapiServiceProvider","Provider","SwapiServiceConsumer","Consumer","PersonDetails","components_ItemDetails","ItemDetails_Record","PlanetDetails","_ref4","StarshipDetails","_ref5","_ref6","PeoplePage","selectedItem","common_Row","Details_PersonDetails","PlanetsPage","Details_PlanetDetails","StarshipsPage","Details_StarshipDetails","NotFound","PlanetView","Fragment","onError","e","target","onerror","RandomPlanet","swapiService","onPlanetLoaded","updatePlanet","Math","floor","random","setInterval","hasData","errorMessage","spinner","content","RandomPlanet_PlanetView","App","showRandomPlanet","components_RandomPlanet_RandomPlanet","components_AppHeader","Switch","Route","path","component","Planets","render","params","Redirect","from","exact","Boolean","window","location","hostname","ReactDOM","BrowserRouter","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.15c550fc.chunk.js","sourcesContent":["import React from 'react';\r\nimport {Link, NavLink} from \"react-router-dom\";\r\n\r\nconst AppHeader = () => {\r\n  return (\r\n\r\n\r\n          <nav className=\"navbar navbar-expand-lg navbar-light\">\r\n            <div className=\"container\">\r\n\r\n              <Link className=\"navbar-brand\" to=\"/\">Star Wars</Link>\r\n\r\n              <button className=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarColor03\"\r\n                      aria-controls=\"navbarColor03\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n                <span className=\"navbar-toggler-icon\">{}</span>\r\n              </button>\r\n\r\n              <div className=\"collapse navbar-collapse\" id=\"navbarColor03\">\r\n\r\n                <ul className=\"navbar-nav mr-auto\">\r\n                  <NavLink className=\"nav-item nav-link\" to=\"/people\">People</NavLink>\r\n                  <NavLink className=\"nav-item nav-link\" to=\"/planets\">Planets</NavLink>\r\n                  <NavLink className=\"nav-item nav-link\" to=\"/starships\">Starships</NavLink>\r\n                </ul>\r\n              </div>\r\n            </div>\r\n          </nav>\r\n\r\n  )\r\n};\r\nexport default AppHeader;","import React from 'react';\r\n\r\nconst Row = ({left, right}) => {\r\n  return (\r\n        <div className=\"row\">\r\n          <div className=\"col-md-12 col-lg-6 mb-3\">\r\n            {left}\r\n          </div>\r\n          <div className=\"col-md-12 col-lg-6 mb-3\">\r\n            {right}\r\n          </div>\r\n        </div>\r\n  );\r\n};\r\n\r\nexport default Row;","export default class SwapiService {\r\n\r\n  _apiBase = 'https://swapi.co/api';\r\n\r\n  async getResource(url) {\r\n    const data = await fetch(`${this._apiBase}${url}`)\r\n          .then(res => res.json())\r\n          .catch(err => {\r\n            console.log('Error: ', err)\r\n          });\r\n    return data\r\n  }\r\n\r\n  // get all people\r\n  getAllPeople = async () => {\r\n    const res = await this.getResource(`/people/`);\r\n    return res.results.map(this._transformPerson);\r\n  };\r\n\r\n  // get people by ID\r\n  getPerson = async (id) => {\r\n    const person = await this.getResource(`/people/${id}`);\r\n    return this._transformPerson(person);\r\n  };\r\n\r\n\r\n  // get all planets\r\n  getAllPlanets = async () => {\r\n    const res = await this.getResource(`/planets/`);\r\n    return res.results.map(this._transformPlanet);\r\n  };\r\n\r\n  // get planet by ID\r\n  getPlanet = async (id) => {\r\n    const planet = await this.getResource(`/planets/${id}`);\r\n    return this._transformPlanet(planet);\r\n  };\r\n\r\n  // get all starships\r\n  getAllStarships = async () => {\r\n    const res = await this.getResource(`/starships/`);\r\n    return res.results.map(this._transformStarship);\r\n  };\r\n\r\n  // get starship by ID\r\n  getStarship = async (id) => {\r\n    const starship = await this.getResource(`/starships/${id}`);\r\n    return this._transformStarship(starship);\r\n  };\r\n\r\n\r\n  _extractId(item) {\r\n    const idRegEx = /\\/([0-9]*)\\/$/;\r\n    return item.url.match(idRegEx)[1];\r\n  }\r\n\r\n\r\n  // data transformation Planet\r\n  _transformPlanet = (planet) => {\r\n    return {\r\n      id: this._extractId(planet),\r\n      name: planet.name,\r\n      population: planet.population,\r\n      rotationPeriod: planet.rotation_period,\r\n      diameter: planet.diameter\r\n    }\r\n  };\r\n\r\n\r\n  // data transformation Starship\r\n  _transformStarship = (starship) => {\r\n    return {\r\n      id: this._extractId(starship),\r\n      name: starship.name,\r\n      model: starship.model,\r\n      costInCredits: starship.cost_in_credits,\r\n      length: starship.length,\r\n      crew: starship.crew,\r\n      passengers: starship.passengers,\r\n      cargoCapacity: starship.cargo_capacity\r\n    }\r\n  };\r\n\r\n  // data transformation Person\r\n  _transformPerson = (person) => {\r\n    return {\r\n      id: this._extractId(person),\r\n      name: person.name,\r\n      height: person.height,\r\n      mass: person.mass,\r\n      eyeColor: person.eye_color,\r\n      birthYear: person.birth_year,\r\n      gender: person.gender\r\n    }\r\n  }\r\n\r\n\r\n}","import React from 'react';\r\nimport './Spinner.css'\r\n\r\nconst Spinner = () => {\r\n  return (\r\n        <div className=\"lds-css ng-scope\">\r\n          <div style={{width: '100%', height: '100%'}} className=\"lds-double-ring\">\r\n            <div>\r\n\r\n            </div>\r\n            <div>\r\n\r\n            </div>\r\n          </div>\r\n        </div>\r\n  )\r\n};\r\n\r\nexport default Spinner;","import React from 'react';\r\n\r\nconst ErrorIndicator = () => {\r\n  return (\r\n        <div className=\"error-indicator\">\r\n          <img src=\"img/error-image.png\" width={85} alt=\"Error\"/>\r\n          <span className=\"boom\">Boom!</span>\r\n          <span>Something has gone terribly wrong</span>\r\n          <span>(but we already sent droids to fix it)</span>\r\n        </div>\r\n  )\r\n};\r\n\r\nexport default ErrorIndicator;","import React, {Component} from 'react';\r\nimport Spinner from \"../Spinner/Spinner\";\r\nimport ErrorIndicator from \"../ErrorIndicator\";\r\n\r\n\r\nconst withData = (View, getData) => {\r\n  return class extends Component {\r\n\r\n    state = {\r\n      data: null,\r\n      loading: true,\r\n      error: false\r\n    };\r\n\r\n\r\n    componentDidMount() {\r\n      this.update()\r\n    }\r\n\r\n\r\n    update() {\r\n      this.setState({\r\n        loading: true,\r\n        error: false\r\n      });\r\n\r\n      getData()\r\n            .then((data) => {\r\n              this.setState({\r\n                data,\r\n                loading: false\r\n              });\r\n            })\r\n            .catch(() => {\r\n              this.setState({\r\n                error: true,\r\n                loading: false\r\n              });\r\n            });\r\n    }\r\n\r\n    render() {\r\n      const {data, loading, error} = this.state;\r\n\r\n      if (loading) {\r\n        return <Spinner/>;\r\n      }\r\n\r\n      if (error) {\r\n        return <ErrorIndicator/>;\r\n      }\r\n      return <View {...this.props} data={data}/>\r\n    }\r\n  };\r\n};\r\n\r\n\r\nexport default withData;","import React from 'react';\r\n\r\nconst ItemList = (props) => {\r\n\r\n  const {data, onItemSelected} = props;\r\n\r\n  const items = data.map(({id, name}) => {\r\n    return (\r\n          <li key={id}\r\n              onClick={() => onItemSelected(id)}\r\n              className=\"list-group-item list-group-item-action\">\r\n            {name}\r\n          </li>\r\n    )\r\n  });\r\n\r\n  return (\r\n        <div className=\"item-list\">\r\n\r\n          <div className=\"form-group\">\r\n            <input type=\"text\" className=\"form-control\" placeholder=\"Search...\"/>\r\n          </div>\r\n\r\n          <ul className=\"list-group\">\r\n            {items}\r\n          </ul>\r\n\r\n          <button type=\"button\" className=\"btn btn-warning mt-3\">More items</button>\r\n        </div>\r\n  );\r\n\r\n};\r\n\r\nexport default ItemList;","import React from 'react';\r\n\r\nimport SwapiService from \"../services/SwapiService\";\r\nimport withData from \"../hoc/withData\";\r\nimport ItemList from \"../ItemList\";\r\n\r\n\r\nconst {getAllPeople, getAllPlanets, getAllStarships} = new SwapiService();\r\n\r\n\r\nconst withChildFunction = (Wrapped, fn) => {\r\n  return (props) => {\r\n    return (\r\n          <Wrapped {...props}>\r\n            {fn}\r\n          </Wrapped>\r\n    )\r\n  }\r\n};\r\n\r\nconst renderName = ({name}) => <span>{name}</span>;\r\nconst renderModelAndName = ({name, model}) => <span>{name} (#{model})</span>;\r\n\r\n\r\nconst PersonList = withData(\r\n      withChildFunction(ItemList, renderName),\r\n      getAllPeople);\r\n\r\nconst PlanetList = withData(\r\n      withChildFunction(ItemList, renderName),\r\n      getAllPlanets);\r\n\r\nconst StarshipList = withData(\r\n      withChildFunction(ItemList, renderModelAndName),\r\n      getAllStarships);\r\n\r\nexport {\r\n  PersonList,\r\n  PlanetList,\r\n  StarshipList\r\n}","import React, {Component} from 'react';\r\nimport {Link} from \"react-router-dom\";\r\n\r\n\r\nconst Record = ({item, field, label}) => {\r\n  return (\r\n        <li><span>{label}:</span> {item[field]}</li>\r\n  )\r\n};\r\n\r\nexport {Record}\r\n\r\n\r\nclass ItemDetails extends Component {\r\n\r\n  state = {\r\n    item: null,\r\n    loading: true,\r\n    error: false\r\n  };\r\n\r\n\r\n  componentDidMount() {\r\n    this.updateItem();\r\n  }\r\n\r\n\r\n  componentDidUpdate(prevProps) {\r\n    if (this.props.itemId !== prevProps.itemId) {\r\n      this.updateItem();\r\n    }\r\n  }\r\n\r\n\r\n  updateItem = () => {\r\n    const {itemId, getData} = this.props;\r\n    if (!itemId) {\r\n      return;\r\n    }\r\n\r\n    getData(itemId)\r\n          .then((item) => {\r\n            this.setState({\r\n              item,\r\n              loading: false\r\n            })\r\n          })\r\n          .catch(() => {\r\n            this.setState({\r\n              error: true,\r\n              loading: false\r\n            });\r\n          })\r\n\r\n  };\r\n\r\n\r\n  render() {\r\n\r\n    const {item} = this.state;\r\n\r\n    if (!item) {\r\n\r\n      return <span>Select a person from a list</span>\r\n    }\r\n\r\n    const {id, name} = item;\r\n\r\n    return (\r\n          <div className=\"short-details bg-light p-3\">\r\n\r\n            <div className=\"d-flex\">\r\n              <div className=\"wrap-img\">\r\n                <img src={`img/${this.props.imageFolder}/${id}.jpg`} className=\"radius-img\" width={180} alt={name}/>\r\n              </div>\r\n              <div className=\"short-details-info ml-3\">\r\n                <h2 className=\"text-uppercase\">{item.name}</h2>\r\n                <ul className=\"list-info\">\r\n\r\n                  {\r\n                    React.Children.map(this.props.children, (child) => {\r\n                      return React.cloneElement(child, {item});\r\n                    })\r\n                  }\r\n                </ul>\r\n              </div>\r\n            </div>\r\n\r\n\r\n\r\n            <Link to=\"/\" type=\"button\" className=\"btn btn-warning mt-3\">More Info</Link>\r\n\r\n          </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ItemDetails;","import React from 'react';\r\n\r\nconst {\r\n  Provider: SwapiServiceProvider,\r\n  Consumer: SwapiServiceConsumer,\r\n} = React.createContext();\r\n\r\n\r\nexport {\r\n  SwapiServiceProvider,\r\n  SwapiServiceConsumer\r\n}","import React from 'react';\r\nimport ItemDetails, {Record} from \"../ItemDetails\";\r\n\r\nimport {SwapiServiceConsumer} from \"../SwapiServiceContext\";\r\n\r\nconst PersonDetails = ({itemId}) => {\r\n  return (\r\n        <SwapiServiceConsumer>\r\n          {\r\n            ({getPerson}) => {\r\n              return (\r\n                    <ItemDetails\r\n                          itemId={itemId}\r\n                          getData={getPerson}\r\n                          imageFolder=\"characters\"\r\n                    >\r\n\r\n                      <Record field=\"gender\" label=\"Gender\"/>\r\n                      <Record field=\"eyeColor\" label=\"Eye Color\"/>\r\n\r\n                    </ItemDetails>\r\n              )\r\n            }\r\n          }\r\n        </SwapiServiceConsumer>\r\n  )\r\n};\r\n\r\nconst PlanetDetails = ({itemId}) => {\r\n  return (\r\n        <SwapiServiceConsumer>\r\n          {\r\n            ({getPlanet}) => {\r\n              return (\r\n                    <ItemDetails\r\n                          itemId={itemId}\r\n                          getData={getPlanet}\r\n                          imageFolder=\"planets\"\r\n                    >\r\n                      <Record field=\"name\" label=\"Name\"/>\r\n                      <Record field=\"population\" label=\"Population\"/>\r\n                      <Record field=\"rotationPeriod\" label=\"RotationPeriod\"/>\r\n                      <Record field=\"diameter\" label=\"Diameter\"/>\r\n                    </ItemDetails>\r\n              )\r\n            }\r\n          }\r\n        </SwapiServiceConsumer>\r\n  )\r\n};\r\n\r\nconst StarshipDetails = ({itemId}) => {\r\n  return (\r\n        <SwapiServiceConsumer>\r\n          {\r\n            ({getStarship}) => {\r\n              return (\r\n                    <ItemDetails\r\n                          itemId={itemId}\r\n                          getData={getStarship}\r\n                          imageFolder=\"starships\"\r\n                    >\r\n                      <Record field=\"name\" label=\"Name\"/>\r\n                      <Record field=\"model\" label=\"Model\"/>\r\n                      <Record field=\"costInCredits\" label=\"Cost In Credits\"/>\r\n                    </ItemDetails>\r\n              )\r\n            }\r\n          }\r\n        </SwapiServiceConsumer>\r\n  )\r\n};\r\n\r\nexport {\r\n  PersonDetails,\r\n  PlanetDetails,\r\n  StarshipDetails\r\n}","import React, {Component} from 'react';\r\nimport Row from \"./common/Row\";\r\nimport {PersonList} from \"./sw-components/ItemLists\";\r\nimport {PersonDetails} from \"./sw-components/Details\";\r\n\r\n\r\nclass PeoplePage extends Component {\r\n  state = {\r\n    selectedItem: null\r\n  };\r\n\r\n  onItemSelected = (selectedItem) => {\r\n    this.setState({selectedItem})\r\n  };\r\n\r\n\r\n  render() {\r\n    const {selectedItem} = this.state;\r\n    return (\r\n          <div className=\"container\">\r\n            <Row\r\n                  left={<PersonList onItemSelected={this.onItemSelected}/>}\r\n                  right={<PersonDetails itemId={selectedItem}/>}\r\n            />\r\n          </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default PeoplePage;","import React, {Component} from 'react';\r\nimport Row from \"./common/Row\";\r\nimport {PlanetList} from \"./sw-components/ItemLists\";\r\nimport {PlanetDetails} from \"./sw-components/Details\";\r\n\r\n\r\nclass PlanetsPage extends Component {\r\n  state = {\r\n    selectedItem: null\r\n  };\r\n\r\n  onItemSelected = (selectedItem) => {\r\n    this.setState({selectedItem})\r\n  };\r\n\r\n\r\n  render() {\r\n    const {selectedItem} = this.state;\r\n    return (\r\n          <div className=\"container\">\r\n            <Row\r\n                  left={<PlanetList onItemSelected={this.onItemSelected}/>}\r\n                  right={<PlanetDetails itemId={selectedItem}/>}\r\n            />\r\n          </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default PlanetsPage;","import React, {Component} from 'react';\r\nimport Row from \"./common/Row\";\r\nimport {StarshipList} from \"./sw-components/ItemLists\";\r\nimport {StarshipDetails} from \"./sw-components/Details\";\r\n\r\n\r\nclass StarshipsPage extends Component {\r\n  state = {\r\n    selectedItem: null\r\n  };\r\n\r\n  onItemSelected = (selectedItem) => {\r\n    this.setState({selectedItem})\r\n  };\r\n\r\n\r\n  render() {\r\n    const {selectedItem} = this.state;\r\n    return (\r\n          <div className=\"container\">\r\n            <Row\r\n                  left={<StarshipList onItemSelected={this.onItemSelected}/>}\r\n                  right={<StarshipDetails itemId={selectedItem}/>}\r\n            />\r\n          </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default StarshipsPage;","import React from 'react';\r\n\r\nconst NotFound = () => {\r\n  return (\r\n        <h1>NotFound</h1>\r\n  );\r\n};\r\n\r\nexport default NotFound;\r\n","import React from 'react';\r\n\r\nconst PlanetView = ({planet}) => {\r\n\r\n  const {id, name, population, diameter, rotationPeriod} = planet;\r\n\r\n  return (\r\n        <React.Fragment>\r\n          <div className=\"col-md-4 col-sm-6 mx-auto text-center\">\r\n            <img\r\n                  className=\"img-fluid radius-img\"\r\n                  src={`img/planets/${id}.jpg`}\r\n                  width={220}\r\n                  alt={name}\r\n                  onError={(e) => {\r\n                    e.target.onerror = null;\r\n                    e.target.src = \"./img/error-image.png\"\r\n                  }}\r\n            />\r\n          </div>\r\n          <div className=\"col-md-8 mx-auto\">\r\n            <div className=\"random-planet-info\">\r\n              <h2 className=\"text-uppercase\">{name}</h2>\r\n              <ul className=\"list-info\">\r\n                <li>ID: <span>{id}</span></li>\r\n                <li>Population: <span>{population}</span></li>\r\n                <li>Rotation: <span>{rotationPeriod}</span></li>\r\n                <li>Diameter: <span>{diameter}</span></li>\r\n              </ul>\r\n            </div>\r\n          </div>\r\n        </React.Fragment>\r\n  )\r\n};\r\n\r\nexport default PlanetView;","import React, {Component} from 'react';\r\nimport SwapiService from \"../services/SwapiService\";\r\nimport Spinner from \"../Spinner/Spinner\";\r\nimport ErrorIndicator from \"../ErrorIndicator\";\r\nimport PlanetView from \"./PlanetView\";\r\n\r\nclass RandomPlanet extends Component {\r\n\r\n  swapiService = new SwapiService();\r\n\r\n  state = {\r\n    planet: {},\r\n    loading: true,\r\n    error: false\r\n  };\r\n\r\n  componentDidMount() {\r\n    setInterval(this.updatePlanet, 5000)\r\n  }\r\n\r\n\r\n  onError = () => {\r\n    this.setState({\r\n      error: true,\r\n      loading: false,\r\n    })\r\n  };\r\n\r\n\r\n  onPlanetLoaded = (planet) => {\r\n    this.setState({\r\n      planet,\r\n      loading: false\r\n    })\r\n  };\r\n\r\n\r\n  updatePlanet = () => {\r\n    const id = Math.floor(Math.random() * 59 + 2);\r\n    this.swapiService.getPlanet(id)\r\n          .then(this.onPlanetLoaded)\r\n          .catch(this.onError)\r\n  };\r\n\r\n\r\n  render() {\r\n\r\n    const {planet, loading, error} = this.state;\r\n\r\n    const hasData = !(loading || error);\r\n\r\n    const errorMessage = error ? <ErrorIndicator/> : null;\r\n\r\n    const spinner = loading ? <Spinner/> : null;\r\n\r\n    const content = hasData ? <PlanetView planet={planet}/> : null;\r\n\r\n    return (\r\n          <div className=\"container\">\r\n            <div className=\"wrap-random-planet bg-light mt-3 p-3\">\r\n              <div className=\"row\">\r\n                {errorMessage}\r\n                {spinner}\r\n                {content}\r\n              </div>\r\n            </div>\r\n          </div>\r\n    )\r\n  }\r\n}\r\nexport default RandomPlanet;\r\n\r\n\r\n","import React, {Component} from 'react';\nimport {Route, Redirect, Switch} from \"react-router-dom\";\n\nimport './App.css';\n\n\nimport AppHeader from \"./components/AppHeader\";\n\nimport PeoplePage from \"./components/PeoplePage\";\nimport Planets from \"./components/PlanetsPage\";\nimport StarshipsPage from \"./components/StarshipsPage\";\n\nimport NotFound from \"./components/NotFound\";\nimport RandomPlanet from \"./components/RandomPlanet/RandomPlanet\";\nimport {SwapiServiceProvider} from \"./components/SwapiServiceContext\";\nimport SwapiService from \"./components/services/SwapiService\";\nimport {StarshipDetails} from \"./components/sw-components/Details\";\n\nclass App extends Component {\n\n  state = {\n    showRandomPlanet: true,\n    swapiService: new SwapiService(),\n  };\n\n  render() {\n    const planet = this.state.showRandomPlanet ? <RandomPlanet/> : null;\n\n    return (\n\n          <SwapiServiceProvider value={this.state.swapiService}>\n            <AppHeader/>\n            {planet}\n            <main className=\"content mt-5\">\n              <Switch>\n\n                <Route path=\"/people\" component={PeoplePage}/>\n\n                <Route path=\"/planets\" component={Planets}/>\n                <Route path=\"/starships\" component={StarshipsPage}/>\n\n\n                <Route path=\"/starships/:id\"\n                       render={({ match }) => {\n                         const { id } = match.params;\n                         return <StarshipDetails itemId={id} />\n                       }}/>\n\n\n                <Route path=\"/not-found\" component={NotFound}/>\n\n                <Redirect from=\"/\" exact to=\"/people\"/>\n                <Redirect to=\"/not-found\"/>\n              </Switch>\n            </main>\n          </SwapiServiceProvider>\n\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {BrowserRouter} from 'react-router-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n      <BrowserRouter>\n        <App/>\n      </BrowserRouter>,\n      document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}